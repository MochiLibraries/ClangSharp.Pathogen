name: ClangSharp.Pathogen
on:
  push:
    # This prevents tag pushes from triggering this workflow
    branches: ['*']
  pull_request:
  release:
    types: [published]
  workflow_dispatch:
    inputs:
      version:
        description: "Version"
        default: ""
      will_publish_packages:
        description: "Publish packages?"
        default: "false"
env:
  DOTNET_NOLOGO: true
  DOTNET_CLI_TELEMETRY_OPTOUT: true
  DOTNET_GENERATE_ASPNET_CERTIFICATE: false
  ContinuousIntegrationBuild: true
jobs:
  build-llvm:
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: windows-latest
            name: Windows
            lib-path: build/bin/libclang.dll
            build-command: ./build-native.cmd
            artifact-name: LlvmBuildOutputs-Windows
          # We use Ubuntu 18.04 so that the binary is usable on systems using glibc 2.27 and later
          # If we want to support even older versions we should explore building libclang with https://github.com/wheybags/glibc_version_header
          - os: ubuntu-18.04
            name: Linux
            lib-path: build-linux/lib/libclang.so
            clang-resource-dir: build-linux/lib/clang/
            build-command: ./build-native.sh
            artifact-name: LlvmBuildOutputs-Linux
    name: Build LLVM - ${{matrix.name}}
    runs-on: ${{matrix.os}}
    steps:
      # ----------------------------------------------------------------------- Checkout
      - name: Checkout
        # We intentionally don't checkout submodules here
        # They will be restored as needed only if we need to build LLVM.
        uses: actions/checkout@v2

      # ----------------------------------------------------------------------- Setup Python
      - name: Setup Python 3.8
        uses: actions/setup-python@v2
        with:
          python-version: '3.8'

      # ----------------------------------------------------------------------- Get LLVM Revision
      - name: Get LLVM Revision
        id: llvm
        run: python .github/workflows/get-llvm-revision.py

      # ----------------------------------------------------------------------- Build LLVM
      - name: Load cached LLVM build outputs
        id: cached-llvm
        uses: actions/cache@v2
        with:
          key: llvm-output-${{runner.os}}-${{steps.llvm.outputs.revision}}
          # These are the paths of the external files required in ClangSharp.Pathogen.Runtime.csproj
          # (Make sure this is syncronized with "Archive LLVM Outputs" below)
          path: |
            ${{matrix.lib-path}}
            ${{matrix.clang-resource-dir}}

      - name: Checkout LLVM
        if: steps.cached-llvm.outputs.cache-hit != 'true'
        run: git submodule update --init --recursive --depth=1

      - name: Install sccache
        id: sccache
        if: steps.cached-llvm.outputs.cache-hit != 'true'
        run: python .github/workflows/install-sccache.py

      - name: Load LLVM sccache
        id: cached-sccache
        if: steps.cached-llvm.outputs.cache-hit != 'true'
        uses: actions/cache@v2
        with:
          path: ${{steps.sccache.outputs.root-directory}}
          key: sccache-cache-${{runner.os}}-${{steps.llvm.outputs.revision}}
          restore-keys: sccache-cache-${{runner.os}}-

      - name: Start sccache server
        if: steps.cached-llvm.outputs.cache-hit != 'true'
        run: sccache --start-server

      # The GitHub hosted runners do not have Ninja installed by default
      # We only need to do this on Linux since Visual Studio comes with a copy of Ninja and we end up picking that one up for Windows
      - name: Install Ninja
        if: steps.cached-llvm.outputs.cache-hit != 'true' && runner.os == 'Linux'
        run: sudo apt install --yes ninja-build

      - name: Build LLVM
        if: steps.cached-llvm.outputs.cache-hit != 'true'
        run: ${{matrix.build-command}}

      - name: Show sccache statistics
        if: steps.cached-llvm.outputs.cache-hit != 'true'
        run: sccache --show-stats

      # The GitHub Actions cache gets confused by the symlink so we need to remove it
      - name: Unsymlink libclang
        if: steps.cached-llvm.outputs.cache-hit != 'true' && runner.os == 'Linux'
        run: |
          cp ${{matrix.lib-path}} ${{matrix.lib-path}}-nosymlink
          rm ${{matrix.lib-path}}
          mv ${{matrix.lib-path}}-nosymlink ${{matrix.lib-path}}

      - name: Upload LLVM build artifacts
        uses: actions/upload-artifact@v2
        with:
          name: ${{matrix.artifact-name}}
          if-no-files-found: error
          # The paths listed here must match "Load cached LLVM build outputs" above
          path: |
            ${{matrix.lib-path}}
            ${{matrix.clang-resource-dir}}

  build-dotnet:
    name: Build ClangSharp.Pathogen
    runs-on: ubuntu-latest
    needs: build-llvm
    outputs:
      publish-to-github: ${{steps.configuration.outputs.publish-to-github}}
    steps:
      # ----------------------------------------------------------------------- Checkout
      - name: Checkout
        uses: actions/checkout@v2
        # Sadly we need to check out submodules here to make SourceLink happy.
        # (Ideally we'd just archive libclang.dll along with the handful of files ClangSharp.Pathogen.Runtime needs to build the NuGet package.)
        with:
          submodules: 'recursive'

      # ----------------------------------------------------------------------- Setup Python
      - name: Setup Python 3.8
        uses: actions/setup-python@v2
        with:
          python-version: '3.8'

      # ----------------------------------------------------------------------- Setup .NET
      - name: Setup .NET
        uses: actions/setup-dotnet@v1
        with:
          dotnet-version: 5.0.x

      # ----------------------------------------------------------------------- Download LLVM Build
      - name: Download LLVM Windows build artifacts
        uses: actions/download-artifact@v2
        with:
          name: LlvmBuildOutputs-Windows
          path: build/bin/
      - name: Download LLVM Linux build artifacts
        uses: actions/download-artifact@v2
        with:
          name: LlvmBuildOutputs-Linux
          path: build-linux/lib/
      
      # ----------------------------------------------------------------------- Configure versioning
      - name: Configure build
        id: configuration
        run: python .github/workflows/configure-build.py
        env:
          github_event_name: ${{github.event_name}}
          github_run_number: ${{github.run_number}}
          release_version: ${{github.event.release.tag_name}}
          workflow_dispatch_version: ${{github.event.inputs.version}}

      # ----------------------------------------------------------------------- Build ClangSharp.Pathogen
      - name: Restore
        run: dotnet restore

      - name: Build
        run: dotnet build --no-restore

      - name: Pack
        id: pack
        run: dotnet pack --no-build

      # ----------------------------------------------------------------------- Collect Artifacts
      - name: Collect Build Outputs
        uses: actions/upload-artifact@v2
        # We always want to collect any build outputs that were created even if building failed
        if: always()
        with:
          name: BuildOutputs
          # The build* folders is fine here because LLVM was built in another job so these will just be the stuff required to build
          path: |
            bin/**
            obj/**
            build*/**
            !build-*.*

      - name: Collect NuGet Packages
        uses: actions/upload-artifact@v2
        # We always want to collect packages when they were produced
        if: steps.pack.outcome == 'success' && always()
        with:
          name: Packages
          if-no-files-found: error
          path: packages/**

  publish-packages-github:
    name: Publish to GitHub
    runs-on: ubuntu-latest
    needs: build-dotnet
    # Pushes to main always publish CI packages
    # Published releases always publish packages
    # A manual workflow only publishes packages if explicitly enabled
    if: (github.event_name == 'push' && github.ref == 'refs/heads/main') || github.event_name == 'release' || (github.event_name == 'workflow_dispatch' && github.event.inputs.will_publish_packages == 'true')
    steps:
      # ----------------------------------------------------------------------- Setup .NET
      - name: Setup .NET
        uses: actions/setup-dotnet@v1
        with:
          dotnet-version: 5.0.x

      # ----------------------------------------------------------------------- Download built packages
      - name: Download built packages
        uses: actions/download-artifact@v2
        with:
          name: Packages
      
      # ----------------------------------------------------------------------- Upload release assets
      - name: Upload release assets
        if: github.event_name == 'release'
        uses: actions/github-script@v4
        with:
          user-agent: actions/github-script for ${{github.repository}}
          script: |
            const fs = require('fs').promises;
            const path = require('path');
            const upload_url = context.payload.release.upload_url;

            if (!upload_url) {
                throw "Missing release asset upload URL!";
            }

            for (let filePath of await fs.readdir('.')) {
                const fileExtension = path.extname(filePath);
                if (fileExtension != '.nupkg' && fileExtension != '.snupkg') {
                    continue;
                }

                console.log(`Uploading '${filePath}'`);
                const contentLength = (await fs.stat(filePath)).size;
                const fileContents = await fs.readFile(filePath);
                await github.repos.uploadReleaseAsset({
                    url: upload_url,
                    headers: {
                        'content-type': 'application/octet-stream',
                        'content-length': contentLength
                    },
                    name: path.basename(filePath),
                    data: fileContents
                });
            }

      # ----------------------------------------------------------------------- Push to GitHub Packages
      - name: Push to GitHub Packages
        run: dotnet nuget push "*.nupkg" --skip-duplicate --no-symbols true --api-key ${{secrets.GITHUB_TOKEN}} --source https://nuget.pkg.github.com/${{github.repository_owner}}
        env:
          # This is a workaround for https://github.com/NuGet/Home/issues/9775
          DOTNET_SYSTEM_NET_HTTP_USESOCKETSHTTPHANDLER: 0
  
  publish-packages-nuget-org:
    name: Publish to NuGet.org
    runs-on: ubuntu-latest
    needs: build-dotnet
    environment: NuGet.org
    # Release builds always publish packages to NuGet.org
    # Workflow dispatch builds will only publish packages if enabled and an explicit version number is given
    if: github.event_name == 'release' || (github.event_name == 'workflow_dispatch' && github.event.inputs.will_publish_packages == 'true' && github.event.inputs.version != '')
    steps:
      # ----------------------------------------------------------------------- Setup .NET
      - name: Setup .NET
        uses: actions/setup-dotnet@v1
        with:
          dotnet-version: 5.0.x

      # ----------------------------------------------------------------------- Download built packages
      - name: Download built packages
        uses: actions/download-artifact@v2
        with:
          name: Packages

      # ----------------------------------------------------------------------- Push to NuGet.org
      - name: Push to NuGet.org
        run: dotnet nuget push "*.nupkg" --api-key ${{secrets.NUGET_API_KEY}} --source ${{secrets.NUGET_API_URL}}
        env:
          # This is a workaround for https://github.com/NuGet/Home/issues/9775
          DOTNET_SYSTEM_NET_HTTP_USESOCKETSHTTPHANDLER: 0

  send-ci-failure-notification:
    name: Send CI Failure Notification
    needs: [build-llvm, build-dotnet, publish-packages-github, publish-packages-nuget-org]
    if: failure() && github.event_name != 'pull_request'
    continue-on-error: true
    runs-on: ubuntu-latest
    steps:
      # ----------------------------------------------------------------------- Checkout
      - name: Checkout
        uses: actions/checkout@v2

      # ----------------------------------------------------------------------- Setup Python
      - name: Setup Python 3.8
        uses: actions/setup-python@v2
        with:
          python-version: '3.8'
      
      # ----------------------------------------------------------------------- Send CI Failure Notification
      - name: Send Notification
        run: python .github/workflows/send-ci-failure-notification.py
        env:
          webhook_url: ${{secrets.TEAMS_WEBHOOK_URL}}
          github_organization: ${{github.repository_owner}}
          github_repo: ${{github.repository}}
          github_workflow_name: ${{github.workflow}}
          github_run_number: ${{github.run_id}}
